(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{451:function(e,r,a){"use strict";a.r(r);var t=a(15),c=Object(t.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"docker-安装-centos"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装-centos"}},[e._v("#")]),e._v(" docker 安装（"),r("strong",[e._v("centos")]),e._v("）")]),e._v(" "),r("ul",[r("li",[e._v("1、安装必要的一些系统工具： "),r("code",[e._v("sudo yum install -y yum-utils device-mapper-persistent-data lvm2")])]),e._v(" "),r("li",[e._v("2、添加软件源信息： "),r("code",[e._v("sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo")])]),e._v(" "),r("li",[e._v("3、更新并安装 Docker-CE： "),r("code",[e._v("sudo yum makecache fast")]),e._v("  以及  "),r("code",[e._v("sudo yum -y install docker-ce")])]),e._v(" "),r("li",[e._v("4、开启Docker服务： "),r("code",[e._v("sudo systemctl enable docker && sudo systemctl start docker")])])]),e._v(" "),r("h1",{attrs:{id:"常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令：")]),e._v(" "),r("p",[r("strong",[e._v("（如果没权限，加sudo执行）")]),e._v(" "),r("strong",[e._v("OPTIONS是可选参数")])]),e._v(" "),r("h2",{attrs:{id:"_1、列出docker容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、列出docker容器"}},[e._v("#")]),e._v(" 1、列出Docker容器")]),e._v(" "),r("p",[e._v("列出当前正在运行的Docker容器: "),r("code",[e._v("docker ps [OPTIONS]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-a：列出所有的容器，包括已经停止的容器;"),r("br"),e._v("\n-f：根据条件过滤容器。比如，docker ps -f status=exited可以列出所有已经停止的容器;"),r("br"),e._v("\n-n：显示最近创建的n个容器"),r("br"),e._v("\n-q：仅显示容器的ID")])]),e._v(" "),r("h2",{attrs:{id:"_2、拉取镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、拉取镜像"}},[e._v("#")]),e._v(" 2、拉取镜像")]),e._v(" "),r("p",[e._v("从Docker Registry或Docker Hub中拉取镜像："),r("code",[e._v("docker pull [OPTIONS] [IMAGES]")])]),e._v(" "),r("blockquote",[r("p",[e._v("--all-tags：拉取镜像的所有标签"),r("br"),e._v("\n--quiet, -q：只输出镜像ID"),r("br"),e._v("\n--disable-content-trust：禁用内容信任验证")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("拉取官方nginx镜像：docker pull nginx \n拉取官方nginx指定版本的镜像：docker pull nginx:1.19.2  \n")])])]),r("h2",{attrs:{id:"_3、列出镜像列表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、列出镜像列表"}},[e._v("#")]),e._v(" 3、列出镜像列表")]),e._v(" "),r("p",[e._v("列出本地主机上的Docker镜像列表: "),r("code",[e._v("docker images [OPTIONS] [REPOSITORY[:TAG]]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-a：列出所有镜像，包括中间层镜像"),r("br"),e._v("\n-q：只显示镜像ID"),r("br"),e._v("\n--no-trunc：显示完整的镜像ID"),r("br"),e._v("\n--digests：显示镜像的摘要信息"),r("br"),e._v("\n--format：指定输出的格式"),r("br"),e._v("\n--filter：根据条件过滤镜像")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('列出本地主机上的所有镜像：docker images  \n列出指定仓库的镜像：docker images ubuntu     \n列出指定标签的镜像：docker images ubuntu:18.04  \n列出所有镜像的ID：docker images -q   \n列出所有镜像的完整ID：docker images -q --no-trunc   \n列出所有镜像的摘要信息：docker images --digests   \n根据条件过滤镜像：docker images --filter "dangling=true"   \n')])])]),r("h2",{attrs:{id:"_4、运行程序或服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、运行程序或服务"}},[e._v("#")]),e._v(" 4、运行程序或服务")]),e._v(" "),r("p",[e._v("运行一个新的应用程序或服务: "),r("code",[e._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-d：在后台运行容器"),r("br"),e._v("\n-p：将容器内部端口映射到主机端口"),r("br"),e._v("\n-v：将主机目录或文件挂载到容器内部"),r("br"),e._v("\n--name：为容器指定一个名称"),r("br"),e._v("\n--rm：容器停止后自动删除"),r("br"),e._v("\n--env：设置容器内部的环境变量"),r("br"),e._v("\n--network：指定容器所在的网络"),r("br"),e._v("\n--restart：容器停止后自动重启"),r("br"),e._v("\n--e：设置容器环境变量")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("运行一个名为“myapp”的容器，将容器内部的端口80映射到主机的端口8080，并将主机的目录“/app”挂载到容器内部的“/usr/src/myapp”目录:    \ndocker run -d -p 8080:80 -v /app:/usr/src/myapp --name myapp nginx   \n")])])]),r("h2",{attrs:{id:"_5、启动容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、启动容器"}},[e._v("#")]),e._v(" 5、启动容器")]),e._v(" "),r("p",[e._v("启动已经停止的容器: "),r("code",[e._v("docker start [OPTIONS] CONTAINER [CONTAINER...]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-a, --attach：附加到容器的标准输入、输出和错误输出"),r("br"),e._v("\n-i, --interactive：启用容器的标准输入，通常与 -a 一起使用"),r("br"),e._v("\n-d, --detach：在后台运行容器"),r("br"),e._v("\n-p, --publish：将容器内部端口映射到主机端口"),r("br"),e._v("\n-P, --publish-all：将所有容器内部暴露的端口映射到主机端口")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("启动名为 mycontainer 的容器并附加到标准输入输出：docker start -ai mycontainer\n")])])]),r("h2",{attrs:{id:"_6、重启容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、重启容器"}},[e._v("#")]),e._v(" 6、重启容器")]),e._v(" "),r("p",[e._v("用于重新启动一个或多个已经停止的容器: docker restart [OPTIONS] CONTAINER [CONTAINER...]")]),e._v(" "),r("blockquote",[r("p",[e._v("-t, --time：等待超时时间，单位为秒")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("重新启动名为container1的容器：docker restart container1  \n")])])]),r("h2",{attrs:{id:"_7、显示守护程序的系统信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、显示守护程序的系统信息"}},[e._v("#")]),e._v(" 7、显示守护程序的系统信息")]),e._v(" "),r("p",[e._v("docker info命令用于显示有关Docker守护程序的系统信息，包括Docker版本、操作系统类型和版本、CPU和内存使用情况、镜像和容器数量等"),r("br"),e._v(" "),r("code",[e._v("docker info")])]),e._v(" "),r("h2",{attrs:{id:"_8、查看日志"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、查看日志"}},[e._v("#")]),e._v(" 8、查看日志")]),e._v(" "),r("p",[e._v("docker logs命令用于查看Docker容器的日志。它可以显示容器的标准输出和标准错误输出。docker logs命令的语法如下"),r("br"),e._v(" "),r("code",[e._v("docker logs [OPTIONS] CONTAINER")])]),e._v(" "),r("blockquote",[r("p",[e._v("-f：实时跟踪容器日志输出"),r("br"),e._v("\n--since：仅显示指定时间之后的日志"),r("br"),e._v("\n--tail：仅显示最后几行日志，默认为所有日志")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("要查看名为“mycontainer”的容器的日志: docker logs mycontainer   \n要实时跟踪容器的日志输出: docker logs -f mycontainer\n要仅显示最后10行日志: docker logs --tail 10 mycontainer   \n要仅显示从指定时间之后的日志:docker logs --since 2021-01-01 mycontainer   \n")])])]),r("p",[r("strong",[e._v("需要注意的是，docker logs命令只能查看正在运行的容器的日志。如果要查看已停止的容器的日志，可以使用docker container logs命令")])]),e._v(" "),r("h2",{attrs:{id:"_9、删除容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9、删除容器"}},[e._v("#")]),e._v(" 9、删除容器")]),e._v(" "),r("p",[e._v("删除容器: "),r("code",[e._v("docker rm [OPTIONS] CONTAINER [CONTAINER...]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-f：强制删除正在运行的容器"),r("br"),e._v("\n-v：删除容器关联的数据卷")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("删除名为 my-container 的容器：docker rm my-container  \n删除所有已停止的容器：docker rm $(docker ps -a -q)  \n强制删除正在运行的容器：docker rm -f my-container\n")])])]),r("h2",{attrs:{id:"_10、删除镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10、删除镜像"}},[e._v("#")]),e._v(" 10、删除镜像")]),e._v(" "),r("p",[e._v("删除本地的一个或多个镜像:"),r("code",[e._v("docker rmi [OPTIONS] IMAGE [IMAGE...]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-f, --force：强制删除镜像，即使有容器正在使用它"),r("br"),e._v("\n-no-prune：不删除镜像的中间层（即镜像的每一层），这些中间层可能被其他镜像所共享")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("要删除名为 **myimage** 的镜像: docker rmi myimage   \n要删除多个镜像: docker rmi myimage1 myimage2 myimage3\n强制删除正在运行中的容器所使用的镜像: docker rmi -f myimage \n")])])]),r("h2",{attrs:{id:"_11、在docker容器中执行命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11、在docker容器中执行命令"}},[e._v("#")]),e._v(" 11、在Docker容器中执行命令")]),e._v(" "),r("p",[e._v("在正在运行的Docker容器中执行命令: "),r("code",[e._v("docker exec [OPTIONS] CONTAINER COMMAND [ARG...]")]),r("br"),e._v(" "),r("strong",[e._v("OPTIONS为可选项，CONTAINER为容器名称或ID，COMMAND为要执行的命令，ARG为命令的参数。")])]),e._v(" "),r("blockquote",[r("p",[e._v("-i：以交互模式运行命令"),r("br"),e._v("\n-t：为命令分配一个伪终端"),r("br"),e._v("\n-d：在后台运行命令"),r("br"),e._v("\n--user：指定要执行命令的用户"),r("br"),e._v("\n--workdir：指定执行命令时的工作目录")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("要在名为mycontainer的容器中运行一个bash shell: docker exec -it mycontainer bash   \n")])])]),r("h2",{attrs:{id:"_12、查看实时资源使用情况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12、查看实时资源使用情况"}},[e._v("#")]),e._v(" 12、查看实时资源使用情况")]),e._v(" "),r("p",[e._v("查看Docker容器的实时资源使用情况，包括CPU、内存、网络和磁盘等方面的数据，可以帮助用户监控和优化容器的性能:"),r("br"),e._v(" "),r("code",[e._v("docker stats [OPTIONS] [CONTAINER...]")])]),e._v(" "),r("blockquote",[r("p",[e._v("--all或-a：显示所有容器的统计信息，包括停止的容器"),r("br"),e._v("\n--format：指定输出格式，支持Go模板语法"),r("br"),e._v("\n--no-stream或-n：只显示一次容器的统计信息，不进行实时监控"),r("br"),e._v("\n--no-trunc：不截断输出的容器名称")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("查看所有容器的实时资源使用情况：docker stats --all\n查看指定容器的实时资源使用情况：docker stats container1 container2\n指定输出格式为JSON：docker stats --format '{{json .}}' container1\n只显示一次容器的统计信息：docker stats --no-stream container1 \n")])])]),r("h2",{attrs:{id:"_13、保存镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13、保存镜像"}},[e._v("#")]),e._v(" 13、保存镜像")]),e._v(" "),r("p",[e._v("将Docker镜像保存成tar包文件: "),r("code",[e._v("docker save [OPTIONS] IMAGE [IMAGE...]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-o, --output：指定输出文件名"),r("br"),e._v("\n--quiet, -q：只输出镜像ID")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("将名为myimage的镜像保存为myimage.tar文件：docker save -o myimage.tar myimage\n")])])]),r("h2",{attrs:{id:"_14、加载镜像到docker引擎中"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14、加载镜像到docker引擎中"}},[e._v("#")]),e._v(" 14、加载镜像到Docker引擎中")]),e._v(" "),r("p",[e._v("将本地文件系统中的Docker镜像加载到Docker引擎中。这些镜像可以是通过docker save命令保存的.tar文件，也可以是通过其他方式获得的Docker镜像文件"),r("br"),e._v(" "),r("code",[e._v("docker load [OPTIONS] < FILE")])]),e._v(" "),r("blockquote",[r("p",[e._v("-i：从标准输入中读取镜像文件，可以省略不写"),r("br"),e._v("\n-q：省略镜像加载过程中的详细输出"),r("br"),e._v("\n--input/-i：从指定文件中读取镜像文件"),r("br"),e._v("\n--quiet/-q：仅输出加载的镜像ID")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("从myimage.tar文件中加载镜像到Docker引擎中: docker load -i myimage.tar  \n")])])]),r("h2",{attrs:{id:"_15、导出到本地文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15、导出到本地文件"}},[e._v("#")]),e._v(" 15、导出到本地文件")]),e._v(" "),r("p",[e._v("将Docker容器的文件系统导出到本地文件系统中的tar归档文件中: "),r("code",[e._v("docker export [OPTIONS] CONTAINER")])]),e._v(" "),r("blockquote",[r("p",[e._v("-o, --output：将导出的内容写入指定的文件中"),r("br"),e._v("\n-h, --help：显示帮助信息")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("将名为my_container的容器的文件系统导出到当前目录下的my_container.tar文件中: docker export my_container > my_container.tar\n将名为my_container的容器的文件系统导出到指定目录下的my_container.tar文件中: docker export -o /path/to/my_container.tar my_container \n")])])]),r("h2",{attrs:{id:"_16、打包镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16、打包镜像"}},[e._v("#")]),e._v(" 16、打包镜像")]),e._v(" "),r("p",[e._v("将本地文件或者目录打包成镜像，可以用于创建一个新的镜像或者将现有的镜像导入到Docker Registry："),r("code",[e._v("docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]")])]),e._v(" "),r("blockquote",[r("p",[e._v("--change=[]：可以指定在导入过程中对镜像进行修改的命令，例如添加新的标签、设置镜像的元数据等"),r("br"),e._v('\n--message=""：指定镜像的描述信息'),r("br"),e._v('\n--platform=""：指定镜像的平台，例如linux/amd64'),r("br"),e._v("\n--quiet：不输出导入过程中的详细信息")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("将本地文件打包成镜像：docker import /path/to/local/file myimage:tag   \n将远程URL打包成镜像：docker import https://example.com/myimage.tar.gz myimage:tag   \n将标准输入数据打包成镜像：cat /path/to/local/file | docker import - myimage:tag   \n")])])]),r("h2",{attrs:{id:"_17、查看docker详细信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17、查看docker详细信息"}},[e._v("#")]),e._v(" 17、查看Docker详细信息")]),e._v(" "),r("p",[e._v("查看Docker对象的详细信息，包括容器、镜像、网络、卷和服务等。使用该命令可以获取对象的各种属性和配置信息，例如IP地址、端口映射、环境变量、挂载点等。该命令的语法如下："),r("br"),e._v(" "),r("code",[e._v("docker inspect [OPTIONS] CONTAINER|IMAGE|NETWORK|VOLUME|SERVICE")])]),e._v(" "),r("blockquote",[r("p",[e._v("-f：指定输出格式"),r("br"),e._v("\n-s：显示对象的大小信息"),r("br"),e._v("\n--type：指定要查看的对象类型"),r("br"),e._v("\n--format：指定输出格式")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("查看名为my_container的容器的详细信息，可以使用以下命令：```docker inspect my_container```   \n将输出包含my_container容器详细信息的JSON格式数据。如果要查看指定对象的某些属性，可以使用-f选项指定输出格式:  \ndocker inspect -f '{{.NetworkSettings.IPAddress}}' my_container\n")])])]),r("h2",{attrs:{id:"_18、复制文件到主机或容器内"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18、复制文件到主机或容器内"}},[e._v("#")]),e._v(" 18、复制文件到主机或容器内")]),e._v(" "),r("p",[e._v("将容器内的文件或目录复制到主机上："),r("code",[e._v("docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-")]),r("br"),e._v("\n将主机上的文件或目录复制到容器内："),r("code",[e._v("docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH")])]),e._v(" "),r("blockquote",[r("p",[e._v("-a：将复制的文件或目录的权限、时间戳等信息一并复制过去"),r("br"),e._v("\n--follow-link：如果复制的是符号链接，会复制链接指向的文件而不是链接本身"),r("br"),e._v("\n--no-preserve=mode：不保留文件的权限"),r("br"),e._v("\n--no-preserve=timestamps：不保留文件的时间戳")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("将容器内的文件复制到主机上：docker cp mycontainer:/app/logs/access.log /tmp   \n将主机上的文件复制到容器内：docker cp /tmp/access.log mycontainer:/app/logs/\n")])])]),r("h2",{attrs:{id:"_19、管理docker容器的数据卷"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19、管理docker容器的数据卷"}},[e._v("#")]),e._v(" 19、管理Docker容器的数据卷")]),e._v(" "),r("p",[e._v("管理Docker容器的数据卷。它可以用来创建、列出、删除和查看数据卷:\n创建一个数据卷："),r("code",[e._v("docker volume create <volume-name>")]),r("br"),e._v("\n列出所有数据卷："),r("code",[e._v("docker volume ls")]),r("br"),e._v("\n查看数据卷的详细信息："),r("code",[e._v("docker volume inspect <volume-name>")]),r("br"),e._v("\n删除一个数据卷："),r("code",[e._v("docker volume rm <volume-name>")]),r("br"),e._v("\n删除所有未被使用的数据卷："),r("code",[e._v("docker volume prune")]),r("br"),e._v("\n将数据卷挂载到容器中："),r("br"),e._v(" "),r("code",[e._v("docker run -v <volume-name>:<container-path> <image-name>")]),e._v(" "),r("strong",[e._v("如：")]),e._v(" "),r("code",[e._v("docker run -v mydata:/data myimage")]),r("br"),e._v(" "),r("strong",[e._v("其中，<volume-name>是数据卷的名称，<container-path>是容器中挂载数据卷的路径，<image-name>是镜像名称")])]),e._v(" "),r("p",[e._v("将数据卷从容器中移除："),r("code",[e._v("docker container rm -v \\<container-name>")])]),e._v(" "),r("h2",{attrs:{id:"_20、多种网络模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20、多种网络模式"}},[e._v("#")]),e._v(" 20、多种网络模式")]),e._v(" "),r("p",[e._v("docker提供了多种网络模式，其中包括桥接网络、主机网络、覆盖网络等。docker网络命令可用于管理这些网络")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("列出所有Docker网络: docker network ls   \n创建一个新的Docker网络: docker network create my-network   \n将容器连接到指定的Docker网络:docker network connect my-network my-container   \n将容器从指定的Docker网络中断开连接: docker network disconnect my-network my-container   \n查看指定的Docker网络的详细信息: docker network inspect my-network   \n删除指定的Docker网络:docker network rm my-network   \n")])])]),r("h2",{attrs:{id:"_21、构建镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_21、构建镜像"}},[e._v("#")]),e._v(" 21、构建镜像")]),e._v(" "),r("p",[e._v("构建Docker镜像: "),r("code",[e._v("docker build [OPTIONS] PATH | URL | -")])]),e._v(" "),r("blockquote",[r("p",[e._v("-t：指定构建出的镜像的名称及标签"),r("br"),e._v("\n--no-cache：不使用缓存来构建镜像"),r("br"),e._v("\n--build-arg：设置Dockerfile中的ARG变量的值"),r("br"),e._v("\n--network：指定构建过程中使用的网络"),r("br"),e._v("\n--progress：指定构建过程中的输出格式")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("从本地Dockerfile构建镜像：docker build -t myimage:1.0 . \n从远程Dockerfile构建镜像：docker build -t myimage:1.0 https://github.com/myuser/myrepo.git####  \n使用–build-arg设置Dockerfile中的ARG变量的值: docker build --build-arg MYVAR=myvalue -t myimage:1.0 .  \n")])])]),r("h2",{attrs:{id:"_22、在运行的容器中执行命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_22、在运行的容器中执行命令"}},[e._v("#")]),e._v(" 22、在运行的容器中执行命令")]),e._v(" "),r("p",[e._v("在运行中的Docker容器中执行命令:"),r("code",[e._v("docker exec [OPTIONS] CONTAINER COMMAND [ARG…]")])]),e._v(" "),r("blockquote",[r("p",[e._v("-i：以交互模式运行容器"),r("br"),e._v("\n-t：为容器分配一个伪终端"),r("br"),e._v("\n-d：在后台运行容器"),r("br"),e._v("\n-u：指定执行命令的用户"),r("br"),e._v("\n-e：设置环境变量")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("在容器中执行命令：docker exec -it mycontainer bash  \n在容器中执行命令并指定用户：docker exec -u user mycontainer name\n")])])]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/qq_52589631/article/details/130124658",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考:"),r("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=c.exports}}]);